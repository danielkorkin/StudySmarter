// src/app/[subjectId]/[courseId]/[unitId]/flashcard/[resourceId]/page.tsx
"use client";

import { useState, useEffect, use } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
	Shuffle,
	ChevronLeft,
	ChevronRight,
	FlipVertical,
	ExternalLink,
} from "lucide-react";
import { cn, formatTitle } from "@/lib/utils";

interface Flashcard {
	term: string;
	definition: string;
}

interface FlashcardData {
	cards: Flashcard[];
	quizletUrl?: string;
}

interface Props {
	params: Promise<{
		subjectId: string;
		courseId: string;
		unitId: string;
		resourceId: string;
	}>;
}

//KNOWT SVG
export function KnowtIcon({ className }: { className?: string }) {
	return (
		<svg
			version="1.1"
			id="Layer_1"
			xmlns="http://www.w3.org/2000/svg"
			width="100%"
			viewBox="0 0 240 240"
			className={className}
		>
			<path
				fill="#50D2C2"
				opacity="1.000000"
				stroke="none"
				d="
M137.000000,241.000000 
	C91.333336,241.000000 46.166672,241.000000 1.000006,241.000000 
	C1.000004,161.000000 1.000004,81.000015 1.000002,1.000017 
	C80.999992,1.000011 160.999985,1.000011 240.999969,1.000006 
	C240.999985,80.999985 240.999985,160.999969 241.000000,240.999969 
	C206.500000,241.000000 172.000000,241.000000 137.000000,241.000000 
M209.829285,238.051559 
	C212.988586,236.627853 216.294006,235.450897 219.257294,233.696198 
	C221.330688,232.468445 224.665482,230.906097 221.922501,227.650040 
	C219.633163,224.932556 216.140015,224.926559 214.105026,227.568298 
	C211.792221,230.570694 210.563278,234.407990 208.627640,238.044846 
	C208.780304,238.063492 208.932983,238.082123 209.829285,238.051559 
M161.432617,158.917862 
	C155.983429,159.196732 150.537155,159.590057 145.084412,159.729950 
	C134.676224,159.996994 124.255043,160.472885 113.856689,160.199387 
	C104.122566,159.943359 94.411003,158.829788 84.266716,158.585785 
	C77.885338,157.529297 73.327332,161.048584 72.925301,167.449387 
	C72.427071,175.381760 75.425812,181.914230 81.438263,187.858688 
	C92.914352,198.971085 107.637337,201.973190 122.628906,203.771973 
	C126.870087,204.280853 131.392334,202.721741 135.751053,201.922318 
	C146.661255,199.921356 156.907532,196.434677 165.573212,187.920181 
	C167.679291,184.822952 170.378754,181.970795 171.778442,178.581802 
	C175.735703,169.000336 174.178940,159.949829 161.432617,158.917862 
M180.526184,155.052994 
	C201.608597,168.745224 225.847519,153.400269 226.889145,132.230652 
	C227.453247,120.765945 227.386856,109.250092 227.112122,97.769112 
	C226.734497,81.988167 213.227661,69.208862 197.496811,69.251266 
	C181.696045,69.293846 168.410522,82.087517 167.912064,97.864372 
	C167.596634,107.848557 167.426285,117.837608 167.233475,127.825302 
	C167.020493,138.858917 170.931244,147.970627 180.526184,155.052994 
M35.251926,156.419220 
	C56.835983,163.393005 75.810013,149.780258 75.969887,127.179314 
	C76.042961,116.849182 76.211456,106.515869 76.042831,96.188789 
	C75.786522,80.491592 62.912632,68.043304 47.023514,67.847847 
	C30.757473,67.647758 17.504982,79.791618 16.925083,95.628143 
	C16.547194,105.947960 16.326077,116.276779 16.241297,126.603271 
	C16.129417,140.230759 22.051291,150.238113 35.251926,156.419220 
M212.362030,60.980816 
	C214.040192,61.700787 215.672318,62.840645 217.408554,63.031036 
	C219.433182,63.253056 221.548828,62.645218 223.624969,62.397461 
	C222.523941,60.482174 221.801147,57.333893 220.257812,56.860451 
	C212.711029,54.545376 205.022858,52.088905 197.230667,51.383465 
	C191.846878,50.896065 186.140488,52.913296 180.737396,54.392521 
	C179.263199,54.796116 178.364243,57.300900 177.201294,58.841393 
	C179.013474,59.528172 180.791794,60.343288 182.655502,60.834667 
	C183.341904,61.015644 184.218170,60.377949 185.027481,60.206421 
	C193.920990,58.321548 202.784744,58.053440 212.362030,60.980816 
M63.661446,52.722538 
	C50.312923,48.049610 37.161236,48.901566 24.374945,54.602234 
	C22.836580,55.288101 21.097368,58.247215 21.397509,59.768787 
	C22.031910,62.984871 24.760935,62.027584 27.018950,61.043446 
	C38.307617,56.123348 49.780636,55.671398 61.577602,59.200516 
	C63.356140,59.732571 65.648178,58.548122 67.702682,58.157677 
	C66.604919,56.425224 65.507149,54.692776 63.661446,52.722538 
M199.483292,209.062622 
	C198.054855,212.401245 196.324356,215.654495 195.344727,219.120010 
	C194.945694,220.531647 195.698257,223.223831 196.786987,223.858917 
	C198.142944,224.649887 200.979843,224.638214 202.129623,223.695480 
	C204.757797,221.540497 207.476715,218.915833 208.755661,215.889053 
	C209.689499,213.679016 209.305206,209.797211 207.857391,207.966217 
	C205.863602,205.444824 202.471939,205.878418 199.483292,209.062622 
M224.988312,204.566391 
	C224.109100,206.865616 223.010818,209.108383 222.400650,211.476913 
	C221.418686,215.288803 223.397537,218.345032 226.645828,219.413284 
	C230.347946,220.630798 231.102478,216.938400 231.868942,214.346558 
	C232.513733,212.166061 233.036484,209.800217 232.863464,207.574707 
	C232.726959,205.819016 231.863708,203.384583 230.553879,202.678146 
	C229.420029,202.066605 227.204498,203.460663 224.988312,204.566391 
M32.255157,21.031706 
	C28.639307,21.295012 23.912218,20.988924 23.376322,25.436010 
	C22.846918,29.829233 27.692642,29.527592 30.684696,30.322535 
	C34.032909,31.212099 37.356033,30.633045 38.287647,26.866816 
	C39.233765,23.041927 36.171257,21.801579 32.255157,21.031706 
M106.232155,146.474625 
	C108.619987,145.991516 111.240082,145.935471 113.285667,144.823044 
	C114.149826,144.353088 114.461861,141.369797 113.874702,140.034729 
	C112.570625,137.069504 110.034431,135.163086 106.718063,137.203079 
	C102.987610,139.497818 102.983360,142.672974 106.232155,146.474625 
M129.169571,139.957489 
	C129.989944,142.254745 130.425385,144.838196 131.817368,146.710495 
	C132.385910,147.475220 135.640015,147.351746 136.576874,146.469330 
	C137.915771,145.208221 138.989243,142.828262 138.865112,141.015900 
	C138.555923,136.501572 133.802231,135.687378 129.169571,139.957489 
M41.128216,19.242998 
	C43.774460,20.751486 46.274323,22.749985 49.117474,23.599325 
	C51.072224,24.183273 54.144394,22.975830 52.143692,20.068325 
	C50.467304,17.632130 47.758877,15.404692 45.019344,14.336249 
	C42.013538,13.163958 39.194218,14.152474 41.128216,19.242998 
M18.217365,12.535401 
	C20.656914,16.682539 26.272285,18.632118 30.006042,16.274620 
	C30.893366,15.714364 31.629309,13.233938 31.138145,12.464563 
	C29.115316,9.295940 21.415007,9.088529 18.217365,12.535401 
z"
			/>
			<path
				fill="#FAFCFB"
				opacity="1.000000"
				stroke="none"
				d="
M180.213623,154.868881 
	C170.931244,147.970627 167.020493,138.858917 167.233475,127.825302 
	C167.426285,117.837608 167.596634,107.848557 167.912064,97.864372 
	C168.410522,82.087517 181.696045,69.293846 197.496811,69.251266 
	C213.227661,69.208862 226.734497,81.988167 227.112122,97.769112 
	C227.386856,109.250092 227.453247,120.765945 226.889145,132.230652 
	C225.847519,153.400269 201.608597,168.745224 180.213623,154.868881 
M175.677719,99.188934 
	C175.521866,111.108528 175.366013,123.028114 175.214005,135.657959 
	C178.243805,144.297867 184.161880,149.509644 193.422760,149.967865 
	C206.418823,150.610886 214.707184,140.700439 214.020523,125.046501 
	C213.962662,116.043900 213.904800,107.041306 213.918732,97.298546 
	C210.827744,87.777008 204.660629,82.360329 196.799500,82.262398 
	C201.448593,91.538284 200.684830,97.299561 194.197754,102.018570 
	C189.861145,105.173233 182.121246,106.204063 175.677719,99.188934 
z"
			/>
			<path
				fill="#FAFCFC"
				opacity="1.000000"
				stroke="none"
				d="
M34.896225,156.265503 
	C22.051291,150.238113 16.129417,140.230759 16.241297,126.603271 
	C16.326077,116.276779 16.547194,105.947960 16.925083,95.628143 
	C17.504982,79.791618 30.757473,67.647758 47.023514,67.847847 
	C62.912632,68.043304 75.786522,80.491592 76.042831,96.188789 
	C76.211456,106.515869 76.042961,116.849182 75.969887,127.179314 
	C75.810013,149.780258 56.835983,163.393005 34.896225,156.265503 
M68.977654,123.045799 
	C69.000099,117.633514 69.141907,112.218193 69.004524,106.809967 
	C68.907120,102.975677 68.432510,99.150978 68.304947,94.608131 
	C65.147835,84.394623 53.956154,77.516998 45.747890,80.686958 
	C52.262535,93.940338 45.017014,102.510971 33.222557,103.404083 
	C29.857662,103.658882 29.882750,104.551964 29.795471,106.790398 
	C29.542852,113.269325 29.048714,119.747719 29.054197,126.225983 
	C29.065735,139.858047 37.707092,148.082245 48.879757,148.232071 
	C61.681873,148.403748 69.612541,138.710312 68.977654,123.045799 
z"
			/>
			<path
				fill="#FD4C4C"
				opacity="1.000000"
				stroke="none"
				d="
M164.962555,188.287704 
	C156.907532,196.434677 146.661255,199.921356 135.751053,201.922318 
	C131.392334,202.721741 126.870087,204.280853 122.628906,203.771973 
	C107.637337,201.973190 92.914352,198.971085 81.555527,187.394135 
	C84.617897,183.604645 87.563011,180.279694 90.854752,176.918274 
	C93.830322,175.629562 96.411499,174.257599 99.110397,173.180679 
	C100.282951,172.712799 101.731339,172.592712 102.996689,172.757675 
	C110.212051,173.698380 117.390869,175.376450 124.620064,175.605331 
	C130.132950,175.779861 135.682343,173.888184 141.256119,173.502090 
	C143.490082,173.347351 146.212753,172.327988 148.256866,175.638626 
	C149.406647,177.500778 152.679718,180.209229 155.952332,177.410492 
	C159.000412,181.260147 161.981491,184.773926 164.962555,188.287704 
z"
			/>
			<path
				fill="#FDFBFB"
				opacity="1.000000"
				stroke="none"
				d="
M155.885345,177.074600 
	C152.679718,180.209229 149.406647,177.500778 148.256866,175.638626 
	C146.212753,172.327988 143.490082,173.347351 141.256119,173.502090 
	C135.682343,173.888184 130.132950,175.779861 124.620064,175.605331 
	C117.390869,175.376450 110.212051,173.698380 102.996689,172.757675 
	C101.731339,172.592712 100.282951,172.712799 99.110397,173.180679 
	C96.411499,174.257599 93.830322,175.629562 90.674339,176.591400 
	C85.581932,171.055023 85.159531,164.567184 84.689507,158.093628 
	C94.411003,158.829788 104.122566,159.943359 113.856689,160.199387 
	C124.255043,160.472885 134.676224,159.996994 145.084412,159.729950 
	C150.537155,159.590057 155.983429,159.196732 161.875183,159.415710 
	C161.465927,166.118317 161.013153,172.472626 155.885345,177.074600 
z"
			/>
			<path
				fill="#1EA998"
				opacity="1.000000"
				stroke="none"
				d="
M211.973419,60.868904 
	C202.784744,58.053440 193.920990,58.321548 185.027481,60.206421 
	C184.218170,60.377949 183.341904,61.015644 182.655502,60.834667 
	C180.791794,60.343288 179.013474,59.528172 177.201294,58.841393 
	C178.364243,57.300900 179.263199,54.796116 180.737396,54.392521 
	C186.140488,52.913296 191.846878,50.896065 197.230667,51.383465 
	C205.022858,52.088905 212.711029,54.545376 220.257812,56.860451 
	C221.801147,57.333893 222.523941,60.482174 223.624969,62.397461 
	C221.548828,62.645218 219.433182,63.253056 217.408554,63.031036 
	C215.672318,62.840645 214.040192,61.700787 211.973419,60.868904 
z"
			/>
			<path
				fill="#1EA998"
				opacity="1.000000"
				stroke="none"
				d="
M64.035416,52.841431 
	C65.507149,54.692776 66.604919,56.425224 67.702682,58.157677 
	C65.648178,58.548122 63.356140,59.732571 61.577602,59.200516 
	C49.780636,55.671398 38.307617,56.123348 27.018950,61.043446 
	C24.760935,62.027584 22.031910,62.984871 21.397509,59.768787 
	C21.097368,58.247215 22.836580,55.288101 24.374945,54.602234 
	C37.161236,48.901566 50.312923,48.049610 64.035416,52.841431 
z"
			/>
			<path
				fill="#0D2F2A"
				opacity="1.000000"
				stroke="none"
				d="
M84.478111,158.339706 
	C85.159531,164.567184 85.581932,171.055023 90.327713,176.627869 
	C87.563011,180.279694 84.617897,183.604645 81.388031,187.127457 
	C75.425812,181.914230 72.427071,175.381760 72.925301,167.449387 
	C73.327332,161.048584 77.885338,157.529297 84.478111,158.339706 
z"
			/>
			<path
				fill="#0E2F2A"
				opacity="1.000000"
				stroke="none"
				d="
M155.952332,177.410492 
	C161.013153,172.472626 161.465927,166.118317 162.364441,159.483368 
	C174.178940,159.949829 175.735703,169.000336 171.778442,178.581802 
	C170.378754,181.970795 167.679291,184.822952 165.267883,188.103943 
	C161.981491,184.773926 159.000412,181.260147 155.952332,177.410492 
z"
			/>
			<path
				fill="#93EEE1"
				opacity="1.000000"
				stroke="none"
				d="
M199.742889,208.800262 
	C202.471939,205.878418 205.863602,205.444824 207.857391,207.966217 
	C209.305206,209.797211 209.689499,213.679016 208.755661,215.889053 
	C207.476715,218.915833 204.757797,221.540497 202.129623,223.695480 
	C200.979843,224.638214 198.142944,224.649887 196.786987,223.858917 
	C195.698257,223.223831 194.945694,220.531647 195.344727,219.120010 
	C196.324356,215.654495 198.054855,212.401245 199.742889,208.800262 
z"
			/>
			<path
				fill="#93EEE1"
				opacity="1.000000"
				stroke="none"
				d="
M225.227692,204.267288 
	C227.204498,203.460663 229.420029,202.066605 230.553879,202.678146 
	C231.863708,203.384583 232.726959,205.819016 232.863464,207.574707 
	C233.036484,209.800217 232.513733,212.166061 231.868942,214.346558 
	C231.102478,216.938400 230.347946,220.630798 226.645828,219.413284 
	C223.397537,218.345032 221.418686,215.288803 222.400650,211.476913 
	C223.010818,209.108383 224.109100,206.865616 225.227692,204.267288 
z"
			/>
			<path
				fill="#8CEBDE"
				opacity="1.000000"
				stroke="none"
				d="
M32.661797,21.053724 
	C36.171257,21.801579 39.233765,23.041927 38.287647,26.866816 
	C37.356033,30.633045 34.032909,31.212099 30.684696,30.322535 
	C27.692642,29.527592 22.846918,29.829233 23.376322,25.436010 
	C23.912218,20.988924 28.639307,21.295012 32.661797,21.053724 
z"
			/>
			<path
				fill="#94EFE1"
				opacity="1.000000"
				stroke="none"
				d="
M208.863190,237.882355 
	C210.563278,234.407990 211.792221,230.570694 214.105026,227.568298 
	C216.140015,224.926559 219.633163,224.932556 221.922501,227.650040 
	C224.665482,230.906097 221.330688,232.468445 219.257294,233.696198 
	C216.294006,235.450897 212.988586,236.627853 209.403595,238.019791 
	C208.977890,237.988022 208.863174,237.882355 208.863190,237.882355 
z"
			/>
			<path
				fill="#1DA897"
				opacity="1.000000"
				stroke="none"
				d="
M105.904495,146.233398 
	C102.983360,142.672974 102.987610,139.497818 106.718063,137.203079 
	C110.034431,135.163086 112.570625,137.069504 113.874702,140.034729 
	C114.461861,141.369797 114.149826,144.353088 113.285667,144.823044 
	C111.240082,145.935471 108.619987,145.991516 105.904495,146.233398 
z"
			/>
			<path
				fill="#1DA897"
				opacity="1.000000"
				stroke="none"
				d="
M129.335907,139.591309 
	C133.802231,135.687378 138.555923,136.501572 138.865112,141.015900 
	C138.989243,142.828262 137.915771,145.208221 136.576874,146.469330 
	C135.640015,147.351746 132.385910,147.475220 131.817368,146.710495 
	C130.425385,144.838196 129.989944,142.254745 129.335907,139.591309 
z"
			/>
			<path
				fill="#8CEBDE"
				opacity="1.000000"
				stroke="none"
				d="
M40.952805,18.908375 
	C39.194218,14.152474 42.013538,13.163958 45.019344,14.336249 
	C47.758877,15.404692 50.467304,17.632130 52.143692,20.068325 
	C54.144394,22.975830 51.072224,24.183273 49.117474,23.599325 
	C46.274323,22.749985 43.774460,20.751486 40.952805,18.908375 
z"
			/>
			<path
				fill="#8CEBDE"
				opacity="1.000000"
				stroke="none"
				d="
M18.276863,12.178501 
	C21.415007,9.088529 29.115316,9.295940 31.138145,12.464563 
	C31.629309,13.233938 30.893366,15.714364 30.006042,16.274620 
	C26.272285,18.632118 20.656914,16.682539 18.276863,12.178501 
z"
			/>
			<path
				fill="#94EFE1"
				opacity="1.000000"
				stroke="none"
				d="
M209.031769,238.044403 
	C208.932983,238.082123 208.780304,238.063492 208.745407,237.963593 
	C208.863174,237.882355 208.977890,237.988022 209.031769,238.044403 
z"
			/>
			<path
				fill="#0C2E29"
				opacity="1.000000"
				stroke="none"
				d="
M213.880768,125.970833 
	C214.707184,140.700439 206.418823,150.610886 193.422760,149.967865 
	C184.161880,149.509644 178.243805,144.297867 175.447495,134.967941 
	C175.815414,122.810341 175.949829,111.342766 176.084259,99.875183 
	C182.121246,106.204063 189.861145,105.173233 194.197754,102.018570 
	C200.684830,97.299561 201.448593,91.538284 196.799500,82.262398 
	C204.660629,82.360329 210.827744,87.777008 213.632782,97.995209 
	C213.524811,107.784859 213.702789,116.877846 213.880768,125.970833 
z"
			/>
			<path
				fill="#000000"
				opacity="1.000000"
				stroke="none"
				d="
M175.880981,99.532059 
	C175.949829,111.342766 175.815414,122.810341 175.445572,134.612823 
	C175.366013,123.028114 175.521866,111.108528 175.880981,99.532059 
z"
			/>
			<path
				fill="#000200"
				opacity="1.000000"
				stroke="none"
				d="
M213.950653,125.508667 
	C213.702789,116.877846 213.524811,107.784859 213.596893,98.365288 
	C213.904800,107.041306 213.962662,116.043900 213.950653,125.508667 
z"
			/>
			<path
				fill="#0C2D28"
				opacity="1.000000"
				stroke="none"
				d="
M68.847588,123.971992 
	C69.612541,138.710312 61.681873,148.403748 48.879757,148.232071 
	C37.707092,148.082245 29.065735,139.858047 29.054197,126.225983 
	C29.048714,119.747719 29.542852,113.269325 29.795471,106.790398 
	C29.882750,104.551964 29.857662,103.658882 33.222557,103.404083 
	C45.017014,102.510971 52.262535,93.940338 45.747890,80.686958 
	C53.956154,77.516998 65.147835,84.394623 68.184433,95.481781 
	C68.041832,99.502213 67.913681,102.652611 68.020309,105.795029 
	C68.225983,111.856400 68.564278,117.913261 68.847588,123.971992 
z"
			/>
			<path
				fill="#000000"
				opacity="1.000000"
				stroke="none"
				d="
M68.912621,123.508896 
	C68.564278,117.913261 68.225983,111.856400 68.020309,105.795029 
	C67.913681,102.652611 68.041832,99.502213 68.095100,95.838715 
	C68.432510,99.150978 68.907120,102.975677 69.004524,106.809967 
	C69.141907,112.218193 69.000099,117.633514 68.912621,123.508896 
z"
			/>
		</svg>
	);
}

export function QuizletIcon({ className }: { className?: string }) {
	return (
		<svg
			role="img"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
			className={className}
			fill="currentColor"
		>
			<title>Quizlet</title>
			<path d="M12.779.025a11.789 11.789 0 0 0-5.338.896A11.829 11.829 0 0 0 3.058 4.11 11.928 11.928 0 0 0 .427 14.363a11.92 11.92 0 0 0 2.3 4.921 11.842 11.842 0 0 0 4.24 3.378 11.783 11.783 0 0 0 10.533-.226.327.327 0 0 1 .331.018 9.136 9.136 0 0 0 5.197 1.545.332.332 0 0 0 .332-.332v-4.038a.334.334 0 0 0-.276-.331 4.732 4.732 0 0 1-1.106-.319.329.329 0 0 1-.191-.352.33.33 0 0 1 .05-.133 11.943 11.943 0 0 0 .772-11.871 11.87 11.87 0 0 0-4.042-4.628A11.793 11.793 0 0 0 12.765.018l.013.007h.001ZM4.843 11.898a7.24 7.24 0 0 1 1.205-4.005 7.18 7.18 0 0 1 3.215-2.657 7.133 7.133 0 0 1 7.815 1.558 7.239 7.239 0 0 1 1.555 7.854 7.202 7.202 0 0 1-2.643 3.234 7.147 7.147 0 0 1-9.049-.896 7.228 7.228 0 0 1-2.103-5.089l.005.001Z" />
		</svg>
	);
}

export default function FlashcardPage(props: Props) {
	const params = use(props.params);
	const [cards, setCards] = useState<Flashcard[]>([]);
	const [quizletUrl, setQuizletUrl] = useState<string | null>(null);
	const [currentIndex, setCurrentIndex] = useState(0);
	const [currentCard, setCurrentCard] = useState<Flashcard | null>(null);
	const [isFlipped, setIsFlipped] = useState(false);
	const [isLoading, setIsLoading] = useState(true);
	const [isAnimating, setIsAnimating] = useState(false);
	const [slideDirection, setSlideDirection] = useState<
		"left" | "right" | null
	>(null);
	const [knowtUrl, setKnowtUrl] = useState<string | null>(null);

	const { subjectId, courseId, unitId, resourceId } = params;

	useEffect(() => {
		const fetchCards = async () => {
			try {
				const response = await fetch(
					`/api/flashcard?path=${encodeURIComponent(
						`${subjectId}/${courseId}/${unitId}/resources/flashcard_${resourceId}.json`,
					)}`,
				);
				const data: FlashcardData = await response.json();
				setCards(data.cards);
				setCurrentCard(data.cards[0]);
				setQuizletUrl(data.quizletUrl || null);
				setKnowtUrl(data.knowtUrl || null);
			} catch (err) {
				console.error("Error loading flashcards:", err);
			} finally {
				setIsLoading(false);
			}
		};
		fetchCards();
	}, [subjectId, courseId, unitId, resourceId]);

	useEffect(() => {
		const handleKeyPress = (e: KeyboardEvent) => {
			if (isAnimating) return;

			switch (e.key) {
				case "ArrowLeft":
					previousCard();
					break;
				case "ArrowRight":
					nextCard();
					break;
				case " ":
					e.preventDefault();
					toggleFlip();
					break;
			}
		};

		window.addEventListener("keydown", handleKeyPress);
		return () => window.removeEventListener("keydown", handleKeyPress);
	}, [isAnimating]);

	const nextCard = () => {
		if (isAnimating || !currentCard) return;
		setIsAnimating(true);
		setSlideDirection("left");
		setIsFlipped(false);

		const nextIndex = (currentIndex + 1) % cards.length;

		setTimeout(() => {
			setCurrentCard(cards[nextIndex]);
			setCurrentIndex(nextIndex);
			setSlideDirection(null);
			setIsAnimating(false);
		}, 200);
	};

	const previousCard = () => {
		if (isAnimating || !currentCard) return;
		setIsAnimating(true);
		setSlideDirection("right");
		setIsFlipped(false);

		const prevIndex = (currentIndex - 1 + cards.length) % cards.length;

		setTimeout(() => {
			setCurrentCard(cards[prevIndex]);
			setCurrentIndex(prevIndex);
			setSlideDirection(null);
			setIsAnimating(false);
		}, 200);
	};

	const toggleFlip = () => {
		if (isAnimating) return;
		setIsFlipped((prev) => !prev);
	};

	const shuffleCards = () => {
		if (isAnimating) return;
		setIsAnimating(true);
		const shuffled = [...cards].sort(() => Math.random() - 0.5);
		setCards(shuffled);
		setCurrentCard(shuffled[0]);
		setCurrentIndex(0);
		setIsFlipped(false);
		setTimeout(() => {
			setIsAnimating(false);
		}, 200);
	};

	if (isLoading || !currentCard) return null;

	return (
		<div className="max-w-4xl mx-auto space-y-4">
			<Card>
				<CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
					<div className="flex items-center gap-4">
						<CardTitle>{formatTitle(resourceId)}</CardTitle>
						<div className="flex gap-2">
							{quizletUrl && (
								<Button
									variant="outline"
									size="sm"
									className="gap-2 text-[#4453FF] hover:text-[#4453FF]/90"
									onClick={() =>
										window.open(quizletUrl, "_blank")
									}
								>
									<QuizletIcon className="h-4 w-4" />
									Open in Quizlet
								</Button>
							)}
							{knowtUrl && (
								<Button
									variant="outline"
									size="sm"
									className="gap-2 text-[#50D2C2] hover:text-[#50D2C2]/90"
									onClick={() =>
										window.open(knowtUrl, "_blank")
									}
								>
									<KnowtIcon className="h-4 w-4" />
									Open in Knowt
								</Button>
							)}
						</div>
					</div>
					<div className="text-sm text-muted-foreground">
						{currentIndex + 1} / {cards.length}
					</div>
				</CardHeader>
				<CardContent className="pt-6">
					<div className="relative min-h-[400px] [perspective:1000px]">
						<div
							className={cn(
								"relative w-full h-[400px] cursor-pointer transition-all duration-200",
								slideDirection === "left" &&
									"animate-slide-left",
								slideDirection === "right" &&
									"animate-slide-right",
							)}
							onClick={toggleFlip}
						>
							<div
								className={cn(
									"absolute inset-0 w-full h-full bg-card rounded-xl border shadow",
									"[transform-style:preserve-3d] transition-transform duration-500",
									isFlipped && "[transform:rotateX(180deg)]",
								)}
							>
								<div className="absolute inset-0 flex items-center justify-center p-6 text-lg text-center [backface-visibility:hidden]">
									{currentCard.term}
								</div>
								<div className="absolute inset-0 flex items-center justify-center p-6 text-lg text-center [backface-visibility:hidden] [transform:rotateX(180deg)]">
									{currentCard.definition}
								</div>
							</div>
						</div>
					</div>
				</CardContent>
			</Card>

			<div className="flex justify-center gap-2">
				<Button
					onClick={previousCard}
					variant="outline"
					size="icon"
					disabled={isAnimating}
				>
					<ChevronLeft className="h-4 w-4" />
				</Button>
				<Button
					onClick={toggleFlip}
					variant="outline"
					size="icon"
					disabled={isAnimating}
				>
					<FlipVertical className="h-4 w-4" />
				</Button>
				<Button
					onClick={shuffleCards}
					variant="outline"
					size="icon"
					disabled={isAnimating}
				>
					<Shuffle className="h-4 w-4" />
				</Button>
				<Button
					onClick={nextCard}
					variant="outline"
					size="icon"
					disabled={isAnimating}
				>
					<ChevronRight className="h-4 w-4" />
				</Button>
			</div>
		</div>
	);
}
